var harvester1 = {

    /** @param {Creep} creep **/
    run: function(creep) {
        if (creep.store.getFreeCapacity() > 0) {
            var sources = creep.room.find(FIND_SOURCES);
            if (creep.harvest(sources[1]) == ERR_NOT_IN_RANGE) {
                creep.moveTo(sources[1], {visualizePathStyle: {stroke: '#ffaa00'}});
            }
        }
        else {
            var towerToFill = this.findTowerToFill(creep);
            
            if (towerToFill) {
                if (creep.transfer(towerToFill, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(towerToFill, {visualizePathStyle: {stroke: '#ffffff'}});
                }
            } else {
                // 如果塔樓都滿了，再將能量傳送到擴展和儲存
                var targets = creep.room.find(FIND_STRUCTURES, {
                    filter: (structure) => {
                        return ((structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN || 
                                (structure.structureType == STRUCTURE_STORAGE && structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0)) &&
                                structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0);
                    }
                });
                if (targets.length > 0) {
                    if (creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                        creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
                    }
                }
            }
        }
    },

    // Find the closest tower that needs energy
    findTowerToFill: function(creep) {
        var towers = creep.room.find(FIND_MY_STRUCTURES, {
            filter: (structure) => {
                return structure.structureType === STRUCTURE_TOWER && structure.energy < structure.energyCapacity;
            }
        });

        if (towers.length > 0) {
            return creep.pos.findClosestByPath(towers);
        } else {
            return null;
        }
    }
};

module.exports = harvester1;